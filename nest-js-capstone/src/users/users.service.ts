import { Injectable, HttpException, HttpStatus } from '@nestjs/common';
import { PrismaService } from '../prisma/prisma.service';
import { UpdateUserDto } from './dto/update-user.dto';

@Injectable()
export class UsersService {
  constructor(private prisma: PrismaService) {}

 // üî• L·∫•y th√¥ng tin user hi·ªán t·∫°i
  // üî• L·∫•y th√¥ng tin user hi·ªán t·∫°i
  async getUserInfo(userId: number) {
    try {
      // Ki·ªÉm tra userId c√≥ h·ª£p l·ªá kh√¥ng
      if (!userId || isNaN(userId)) {
        throw new HttpException('Invalid user ID', HttpStatus.BAD_REQUEST);
      }

      const user = await this.prisma.nguoi_dung.findUnique({
        where: { nguoi_dung_id: userId },
        select: {
          nguoi_dung_id: true,
          email: true,
          ho_ten: true,
          tuoi: true,
        },
      });

      if (!user) {
        throw new HttpException('User not found', HttpStatus.NOT_FOUND);
      }

      return user;
    } catch (error) {
      console.error('Error in getUserInfo:', error);
      if (error instanceof HttpException) {
        throw error; // N√©m l·∫°i l·ªói ƒë√£ ƒë∆∞·ª£c x·ª≠ l√Ω
      }
      throw new HttpException(
        `Internal server error: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }

  // üî• L·∫•y danh s√°ch ·∫£nh ƒë√£ l∆∞u theo user id
  async getSavedImages(userId: number) {
    return this.prisma.luu_anh.findMany({
      where: { nguoi_dung_id: userId },
      include: {
        hinh_anh: true, // L·∫•y th√¥ng tin ·∫£nh ƒë√£ l∆∞u
      },
    });
  }

  // üî• L·∫•y danh s√°ch ·∫£nh ƒë√£ t·∫°o theo user id
  async getCreatedImages(userId: number) {
    return this.prisma.hinh_anh.findMany({
      where: { nguoi_dung_id: userId },
      include: {
        nguoi_dung: true, // L·∫•y th√¥ng tin ng∆∞·ªùi t·∫°o (t√πy ch·ªçn)
      },
    });
  }

  // üî• C·∫≠p nh·∫≠t th√¥ng tin c√° nh√¢n c·ªßa user
  async updateUserInfo(userId: number, updateUserDto: UpdateUserDto) {
    try {
      // Truy v·∫•n th√¥ng tin user hi·ªán t·∫°i t·ª´ database
      const user = await this.prisma.nguoi_dung.findUnique({
        where: { nguoi_dung_id: userId },
      });

      if (!user) {
        throw new HttpException('User not found', HttpStatus.NOT_FOUND);
      }

      // C·∫≠p nh·∫≠t th√¥ng tin v·ªõi gi√° tr·ªã t·ª´ DTO ho·∫∑c gi·ªØ nguy√™n gi√° tr·ªã c≈©
      const updatedUser = await this.prisma.nguoi_dung.update({
        where: { nguoi_dung_id: userId },
        data: {
          ho_ten: updateUserDto.ho_ten ?? user.ho_ten, // Gi·ªØ nguy√™n n·∫øu kh√¥ng g·ª≠i
          tuoi: updateUserDto.tuoi ?? user.tuoi,       // Gi·ªØ nguy√™n n·∫øu kh√¥ng g·ª≠i
        },
        select: {
          nguoi_dung_id: true,
          email: true,
          ho_ten: true,
          tuoi: true,
        },
      });

      return updatedUser;
    } catch (error) {
      console.error('Error in updateUserInfo:', error);
      throw new HttpException(
        `Internal server error: ${error.message}`,
        HttpStatus.INTERNAL_SERVER_ERROR,
      );
    }
  }
  
}